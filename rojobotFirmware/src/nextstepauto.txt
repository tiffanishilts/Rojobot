next_step_auto: 

        // You need to add your code over here to make the icon move automatically. That is to make icon
		//follow black line when you  turn on the SW[15].

                // store sensor registers in temp registers s1-s3
                //lb s1, SENSOR_REG
                li s2, PORT_BOTCTRL
                li s3, PORT_BOTINFO
                j INIT

                BLOCKED:
                
                li t1, 0x00           // load value to turn left and right motor off
                sb t1, 0(s2)          // STOP
                
                BLOCKEDLOOP:

                j BLOCKED             // infinite loop

                INIT:
                
                li t1, 0x00           // load value to turn left and right motor off
                sb t1, 0(s2)          // STOP

                ONLINE:
                
                lw t1, 0(s3)              // read bot input register
                srli t1, t1, 8            // move over for comparison
                and t1, t1, MSKBOTINFO    // mask for sensor reg
                and t1, t1, 0x00000007   // mask for blk line sensors
                bne t1, zero, WALLCHECK   // jump to reverse if not zero

                li t1, 0x33           // load value to put left and right motor in to forward mode
                sb t1, 0(s2)          // FWD
                
                jal WRITE_DISPLAY    // update display
                j ONLINE   // continue going forward if on blk line
                
                WALLCHECK:

                lw t1, 0(s3)              // read bot input register
                srli t1, t1, 11            // shift over for proximity sensor
                and t1, t1, 0x00000003   // mask for proximity sensors
                li t2, 3              // load value which indicates wall
                //beq t1, t2, BLOCKED   // enter fail state until reset if wall

                REV2LINE:
                
                lw t1, 0(s3)              // read bot input register
                srli t1, t1, 8            // shift over for sensor reg
                and t1, t1, MSKBOTINFO    // mask for sensor reg
                and t1, t1, 0x00000007   // mask for blk line sensors
                li t2, 7
                bne t1, t2, TURNING   // jump to turning if back on black line

                li t1, 0x22           // load value to put left and right motor in reverse
                sb t1, 0(s2)          // REV

                jal WRITE_DISPLAY      // update display
                j REV2LINE

                TURNING:

                // store original orientation for comparison
                lw s1, 0(s3)                // read bot input register
                and s1, s1, MSKBOTINFO     // mask for bot info reg
                and s1, s1, 0x00000007     // mask for orientation bits       

                TURNINGLOOP:

                li t1, 0x30           // load value for slow right turn
                sb t1, 0(s2)          // SRT

                jal WRITE_DISPLAY      // update display

                li t1, 0x07            // number to check wrap case
                beq t1, s1, WRAPCASE

                addi t1, s1, 0x01           // check if 45 degrees achieved
                lw t2, 0(s3)                // read bot input register
                and t2, t2, MSKBOTINFO     // mask for bot info reg
                and t2, t2, 0x00000007     // mask for orientation bits  
                bne t1, t2, TURNINGLOOP    // continue turning if not + 45 degrees
                j ENDTURN                  // skip over wrap case if branch falls through               

                WRAPCASE:

                lw t1, 0(s3)                // read bot input register
                and t1, t1, MSKBOTINFO     // mask for bot info reg
                and t1, t1, 0x00000007     // mask for orientation bits  
                bne t1, zero, TURNINGLOOP  // continue turning if not zero degrees
                
                ENDTURN:

                li t1, 0x00           // load value to turn left and right motor off
                sb t1, 0(s2)          // STOP

                j ONLINE

WRITE_DISPLAY:
   
                addi sp, sp, -4   // make room for ra on stack
                sw ra, 0(sp)      // save ra on the stack

                li    x13, PORT_BOTINFO         #   Load the BotInfo port address
                lw    x21, 0(x13)               #   Read the BotInfo Register

                and   x22, x21, MSKBOTINFO      #   Mask out the unwanted bits
                # sb    x22, BOTINF_REG           #   Update the BotInfo memory location
                la t2, BOTINF_REG
                sb x22, 0(t2)

                srl   x21, x21, 8               #   Move the original data to extract the Sensor info
                and   x22, x21, MSKBOTINFO      #   Mask out the unwanted bits
                # sb    x22, SENSOR_REG           #   Store the sensor information in the Sensor register memory location
                la t2, SENSOR_REG
                sb x22, 0(t2)

                srl   x21, x21, 8               #   Do the same for LOCy_REG
                and   x22, x21, MSKBOTINFO
                # sb    x22, LOCy_REG
                la t2, LOCy_REG
                sb x22, 0(t2)

                srl   x21, x21, 8               #   Do the same for LOCx_REG
                and   x22, x21, MSKBOTINFO
                # sb    x22, LOCx_REG
                la t2, LOCx_REG
                sb x22, 0(t2)

                jal next_loc                    #   Dig[3:0] = next LocX, next LocY
                nop
                jal next_mvmt                   #   Dig[4] = next movement
                nop
                jal next_hdg                    #   Dig[7:4] = next heading
                nop
                                                #   }
                jal wr_alldigits                #   write all of the digits to the display
                nop
                lb  t3, SENSOR_REG              #   update LEDs with new sensor information
                jal LED_wrleds                  #
 
                lw ra, 0(sp)   // restore ra from the stack
                addi sp, sp, 4 // deallocate stack space
                jr ra          // return to caller
#########################################################################################################

next_step_manual:
                lb      x25,(SENSOR_REG)   // I don't think these lines are doing anything...
                lb      t3, (SENSOR_REG)
                lb      t0, (SENSOR_REG)
                AND     x25,    x25,MSKPROXL
                AND     t3, t3,MSKPROXR
                AND     t0, t0,MSKBLKL

                jal     DEB_rdbtns                  # Read the pushbuttons. buttons returned in a0
                nop
                jal     btn2mot                     # and calculate new MotCtl - returned in t3
                nop
                li      x25,    PORT_BOTCTRL
                sw      t3,     0(x25)              # tell Rojobot what to do
                beq     zero, zero, ret_next_step
                nop